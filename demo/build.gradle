buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		//classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
		classpath "se.transmode.gradle:gradle-docker:1.2"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
//apply plugin: 'com.palantir.docker'
apply plugin: 'docker'


group = 'mt.microservice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

/*
docker {
    name "${project.group}/${jar.baseName}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

*/

task buildDocker(type: Docker) {
  baseImage = 'openjdk:8-jdk-alpine'
  push = project.hasProperty('push')
  tag = 'magnustiberius/demo'
  addFile {
    from jar
    rename {'app.jar'}
  }
  entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
  // exposePort(8080)
}

buildDocker.dependsOn(build)



dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
}

//https://geowarin.github.io/spring-boot-app-in-docker-image.html


